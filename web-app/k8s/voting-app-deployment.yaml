apiVersion: apps/v1
kind: Deployment
metadata:
  name: voting-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: voting-app
  template:
    metadata:
      labels:
        app: voting-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"  # Explicit protocol
    spec:
      containers:
      - name: voting-app
        image: voting-app:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 5000
        env:
        - name: FLASK_ENV
          value: "production"
        - name: DB_HOST
          value: "postgres"
        - name: DB_NAME
          value: "votes"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASS
          value: "postgres"
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 20
          failureThreshold: 3
        startupProbe:  # Added for better initialization
          httpGet:
            path: /
            port: 5000
          failureThreshold: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: voting-app
spec:
  type: NodePort
  selector:
    app: voting-app
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
      nodePort: 31000  # Fixed port for easier testing
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: voting-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: voting-app
  minReplicas: 1
  maxReplicas: 5
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 0  # Remove all delay
      policies:
      - type: Percent
        value: 100  # Remove all excess pods at once
        periodSeconds: 2  # Check every 10 seconds
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Pods
        value: 2
        periodSeconds: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 30
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70

